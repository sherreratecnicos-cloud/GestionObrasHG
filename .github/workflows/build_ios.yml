name: Build iOS App

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  build:
    runs-on: macos-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up Xcode
        run: |
          sudo xcode-select -s /Applications/Xcode_16.1.app
          xcodebuild -version

      - name: Generate Xcode project
        run: |
          # Crear estructura de carpetas
          mkdir -p GestionObrasHG/GestionObrasHG/{Models,Views,Assets.xcassets,Resources,PDFs}
          mkdir -p GestionObrasHG.xcodeproj

          # Package.swift
          cat > GestionObrasHG/Package.swift <<EOF
          import PackageDescription
          let package = Package(
              name: "GestionObrasHG",
              platforms: [.iOS(.v17)],
              products: [
                  .executable(name: "GestionObrasHG", targets: ["GestionObrasHG"])
              ],
              targets: [
                  .target(
                      name: "GestionObrasHG",
                      path: "GestionObrasHG"
                  )
              ]
          )
          EOF

          # App.swift
          cat > GestionObrasHG/GestionObrasHG/App.swift <<EOF
          import SwiftUI

          @main
          struct GestionObrasHGApp: App {
              @StateObject private var dataController = DataController()

              var body: some Scene {
                  WindowGroup {
                      ListaObrasView()
                          .environmentObject(dataController)
                  }
              }
          }
          EOF

          # Models/Models.swift
          cat > GestionObrasHG/GestionObrasHG/Models/Models.swift <<EOF
          import Foundation
          import SwiftUI

          struct Obra: Identifiable, Codable {
              var id = UUID()
              var nombre: String
              var direccion: String
              var visitas: [Visita] = []
          }

          struct Visita: Identifiable, Codable {
              var id = UUID()
              var fecha: Date
              var descripcion: String
              var imagenGeneral: Data?
              var anotaciones: [Anotacion] = []
          }

          struct Anotacion: Identifiable, Codable {
              var id = UUID()
              var texto: String
              var foto: Data?
          }
          EOF

          # Models/DataController.swift
          cat > GestionObrasHG/GestionObrasHG/Models/DataController.swift <<EOF
          import Foundation
          import SwiftUI

          class DataController: ObservableObject {
              @Published var obras: [Obra] = []
              private let saveKey = "obrasGuardadas.json"

              init() { load() }

              func load() {
                  let url = getDocumentsDirectory().appendingPathComponent(saveKey)
                  if let data = try? Data(contentsOf: url),
                     let decoded = try? JSONDecoder().decode([Obra].self, from: data) {
                      obras = decoded
                  }
              }

              func save() {
                  let url = getDocumentsDirectory().appendingPathComponent(saveKey)
                  if let data = try? JSONEncoder().encode(obras) {
                      try? data.write(to: url)
                  }
              }

              func addObra(nombre: String, direccion: String) {
                  obras.append(Obra(nombre: nombre, direccion: direccion))
                  save()
              }

              func deleteObra(at offsets: IndexSet) {
                  obras.remove(atOffsets: offsets)
                  save()
              }

              private func getDocumentsDirectory() -> URL {
                  FileManager.default.urls(for: .documentDirectory, in: .userDomainMask)[0]
              }
          }
          EOF

          # Views/ListaObrasView.swift
          cat > GestionObrasHG/GestionObrasHG/Views/ListaObrasView.swift <<EOF
          import SwiftUI

          struct ListaObrasView: View {
              @EnvironmentObject var data: DataController
              @State private var showingAddObra = false

              var body: some View {
                  NavigationView {
                      List {
                          ForEach(data.obras) { obra in
                              NavigationLink(destination: DetalleObraView(obra: obra)) {
                                  VStack(alignment: .leading) {
                                      Text(obra.nombre)
                                          .font(.headline)
                                      Text(obra.direccion)
                                          .font(.subheadline)
                                          .foregroundColor(.gray)
                                  }
                              }
                          }
                          .onDelete(perform: data.deleteObra)
                      }
                      .navigationTitle("Obras")
                      .toolbar {
                          Button(action: { showingAddObra = true }) {
                              Label("Nueva Obra", systemImage: "plus.circle.fill")
                          }
                      }
                      .sheet(isPresented: $showingAddObra) {
                          NuevaObraView()
                      }
                  }
              }
          }
          EOF

          # Views/NuevaObraView.swift
          cat > GestionObrasHG/GestionObrasHG/Views/NuevaObraView.swift <<EOF
          import SwiftUI

          struct NuevaObraView: View {
              @EnvironmentObject var data: DataController
              @Environment(\.dismiss) var dismiss

              @State private var nombre = ""
              @State private var direccion = ""

              var body: some View {
                  NavigationView {
                      Form {
                          TextField("Nombre de la obra", text: $nombre)
                          TextField("DirecciÃ³n", text: $direccion)
                      }
                      .navigationTitle("Nueva Obra")
                      .toolbar {
                          ToolbarItem(placement: .confirmationAction) {
                              Button("Guardar") {
                                  data.addObra(nombre: nombre, direccion: direccion)
                                  dismiss()
                              }
                          }
                          ToolbarItem(placement: .cancellationAction) {
                              Button("Cancelar", role: .cancel) {
                                  dismiss()
                              }
                          }
                      }
                  }
              }
          }
          EOF

          # Views/DetalleObraView.swift
          cat > GestionObrasHG/GestionObrasHG/Views/DetalleObraView.swift <<EOF
          import SwiftUI

          struct DetalleObraView: View {
              let obra: Obra

              var body: some View {
                  VStack {
                      if obra.visitas.isEmpty {
                          Text("Sin visitas registradas")
                              .foregroundColor(.gray)
                              .padding()
                      } else {
                          List(obra.visitas) { visita in
                              Text(visita.descripcion)
                          }
                      }
                  }
                  .navigationTitle(obra.nombre)
              }
          }
          EOF

      - name: Clean Build Folder
        run: |
          xcodebuild clean \
            -project GestionObrasHG.xcodeproj \
            -scheme GestionObrasHG \
            -configuration Release \
            CODE_SIGNING_ALLOWED=NO

      - name: Archive app
        run: |
          mkdir -p build
          xcodebuild archive \
            -project GestionObrasHG.xcodeproj \
            -scheme GestionObrasHG \
            -configuration Release \
            -archivePath ./build/GestionObrasHG.xcarchive \
            CODE_SIGNING_ALLOWED=NO

      - name: Export IPA
        run: |
          cat > ExportOptions.plist <<EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>method</key>
              <string>development</string>
              <key>signingStyle</key>
              <string>none</string>
          </dict>
          </plist>
          EOF

          xcodebuild -exportArchive \
            -archivePath ./build/GestionObrasHG.xcarchive \
            -exportOptionsPlist ExportOptions.plist \
            -exportPath ./build/ipa

      - name: Upload IPA
        uses: actions/upload-artifact@v4
        with:
          name: GestionObrasHG-IPA
          path: build/ipa
          if-no-files-found: warn
          compression-level: 6
          overwrite: true
